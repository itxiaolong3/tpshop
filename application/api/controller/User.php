<?php
/**
 --------------------------------------------------
 空间类型   用户个人中心控制器
 --------------------------------------------------
 Copyright(c) 2017 时代万网 www.agewnet.com
 --------------------------------------------------
 开发人员: lichao  <729167563@qq.com>
 --------------------------------------------------

 */
namespace app\api\controller;

use app\common\logic\Message;
use app\common\logic\UsersLogic;
use app\common\model\MenuCfg;
use app\common\model\UserAddress;
use app\common\model\UserMessage;
use think\Db;
use think\Loader;
use think\Page;
use plugins\Qrcode;
//defined('URL',"12342344353545");
define('ECODE','http://crm.miraclife.com/customer/apt/getOpenDoorCode.do', true);

class User extends Base{

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        if(empty($this->user_id)){
            return returnBad('登录超时请重新登录',3021);
        }
        $usersLogic = new UsersLogic;
        $result = $usersLogic->getApiUserInfo($this->user_id);
        $result['result']["level_name"] = Db::name("user_level")->where(["level_id" => $result["result"]["level"]])->getField('level_name');
        $sign = Db::name("user_sign")->where(["user_id" => $this->user_id])->getField('sign_total');
        $result['result']["sign_total"] = $sign ? $sign : 0;
        return returnOk($result['result']);
    }


    /*
     * 积分明细
     */
    public function points_list()
    {
        $this->user_id='207';
        $type = I('type','all');
        $usersLogic = new UsersLogic;
        $account_log['pay_points'] = Db::name('user_integral')->where(['ui_uid'=>$this->user_id])->sum("ui_integral"); //积分
        if($account_log['pay_points']){
            Db::name('users')->where('user_id='.$this->user_id)->save(['pay_points'=>$account_log['pay_points']]);
        }
        $result = $usersLogic->points($this->user_id, $type);
        $account_log['list'] = $result['account_log'];
        return returnOk($account_log);
    }
    /**
     * 提现记录列表
     */
    public function withdrawals_list()
    {
        $p = I("p/d");
        $withdrawals_where['user_id'] = $this->user_id;
        $count = M('withdrawals')->where($withdrawals_where)->count();
        $page = new Page($count, 15);
        $lists = M('withdrawals')->where($withdrawals_where)->order("create_time desc")->limit("{$page->firstRow},{$page->listRows}")->select();
        $next = M('withdrawals')->where($withdrawals_where)->page($p + 1, 15)->column('id');
        foreach($lists as $v){
            $ym = date("Y年m月", $v["create_time"]);
            $v["status"] = C('WITHDRAW_STATUS')[$v["status"]];
            $list[$ym][]=$v;
        }
        $data["next_page"] = $next ? $p + 1 : false;
        $data["list"] = $list;
        return returnOk($data);
    }
    /**
     * 提现添加
     */
    public function withdrawals_add(){
       // $this->user_id =207;
        if(empty($this->user_id)){
            returnOk(['status' => 0, 'msg' => '请先登录','return_url'=>U('User/login')]);
        }
      $a =[
          'create_time'=>time(),
          'money'=>I('post.money'),//提现金额
         // 'pay_time'=>I(post.pay_time),//支付时间
          'bank_name'=>I('post.bank_name'),//银行名称
          'bank_card'=>I('post.bank_card'),//银行卡号
          'realname'=>I('post.realname'),//真实姓名或账户
          'taxfee'=>I('post.taxfee'), //手续费
          'status'=>0, //提现状态
          'truemoney'=>I('post.truemoney'),//实际到账
          ];

        $usersLogic = new UsersLogic;
        $result = $usersLogic->withdrawals_add($this->user_id, $a);
        var_dump($result);die;
    }
    /**

     * 钱包明细
     * @return mixed
     */
    public function account_list()
    {
        $type = I('type','all');   //all 所有  plus 收入  扣除
        $p = I('p/d');
        $usersLogic = new UsersLogic;
        $result = $usersLogic->account($this->user_id, $type);
        $account_log = $result['account_log'];
        foreach($account_log as $v){
            $date = strtotime($v["change_data"]);
            $ym = date("Y年m月", $date);
            $list[$ym][]=$v;
        }

        $next = M('account_log')->where("user_money!=0 and user_id=" . $this->user_id)->page($p + 1, 15)->column('log_id');
        $data["next_page"] = $next ? $p + 1 : false;
        $data["list"] = $list;
        return returnOk($data);
    }


    /**
     * 下线列表(我的团队)
     */
    public function lower_list(){
         //确实统计所有数量(多级统计)还有显示所有下级的信息
        $level = intval(I('post.level',0));//等级 这个等级是根据用户消费积分来的 默认为下级
        if($level===0){
            $level=[1,2];
        }
        $q = I('post.q','','trim'); //搜索用
        $condition = array(1=>'first_leader',2=>'second_leader');
        if(is_array($level)){
            foreach ($level as $v){
                $where[] ="{$condition[$v]} ={$this->user_id}";
            }
            if(is_array($where)){
                $where= implode(' or ',$where);
            }
        }else{
            $where = "{$condition[$level]} = {$this->user_id}";
        }
        $bind = array();
        if($q){
            $where .= " and (nickname like :q1 or user_id = :q2 or mobile = :q3)";
            $bind['q1'] = "%$q%";
            $bind['q2'] = $q;
            $bind['q3'] = $q;
        }
        $count = Db::name('users')->where($where)->bind($bind)->count();
        $count0=Db::name('users')->where(['first_leader'=>$this->user_id])->whereOr(['second_leader'=>$this->user_id])->bind($bind)->count();
        $count1 =Db::name('users')->where(['first_leader'=>$this->user_id])->bind($bind)->count();
        $count2 =Db::name('users')->where(['second_leader'=>$this->user_id])->bind($bind)->count();
        $page = new Page($count,C('PAGESIZE'));
        $lists = Db::name('users')->alias("a")
            ->field('a.nickname,a.user_id,b.level_name,a.province,a.city,a.reg_time,a.head_pic,a.first_leader,a.second_leader')
            ->join('user_level b','b.level_id = a.level','INNER')
            ->where($where)->bind($bind)
            ->limit("{$page->firstRow},{$page->listRows}")
            ->order('first_leader desc')
            ->select();
        foreach ($lists as $k =>$v){
            $lists[$k]['address']=$v['province'].' '.$v['city'];
            unset( $lists[$k]['province'], $lists[$k]['city']);
        }
      // var_dump($lists);die;
//        $region_list = db('region')->cache(true)->getField('id,name');//地区
//        foreach ($lists as $k => $v){
//            if($v['province']){
//                $lists[$k]['province'] = $region_list[$v['province']]; //省
//                $lists[$k]['city'] = $region_list[$v['city']];//市
//            }
//        }
      //  $level = Db::name("user_level")->where(["level_id"=>["=", $this->user['level']]])->field('level_id,level_name as name')->select();
        $data=[
          //  'count' => $count, //统计数量 0 总人数 1. 一级总人数 2. 二级总人数
            'count0' =>$count0,
            'count1' => $count1, //一级
            'count2' => $count2, //二级
            'list' => $lists, //队伍
         //   'level' => $level
        ];
        return returnOk($data);
    }

    /**
     * 下线订单列表（分销订单）
     */
    public function order_list(){
        $p =  I('post.type','1');//订单商品？？？
        $user = Db::name('users')->where(['user_id'=>$this->user_id])->find();
        $status = I('post.status','all');//订单状态  //0未付款,1已付款, 2等待分成(已收货) 3已分成, 4已取消
        if($status=='all'){
            $status = '0,1,2,3';
        }
        $where = array('user_id'=>$this->user_id,'status'=>['in',$status]);

        $count = M('rebate_log')->where($where)->count();//分销表
        $Page  = new Page($count,C('PAGESIZE'));
        $list = M('rebate_log')->where($where)->order("id desc")->limit($Page->firstRow.','.$Page->listRows)->select(); //分成订单记录

        if(!$list){
            $data['distribut_money'] = $user['distribut_money'];
            $data['total_order_money'] = 0; //总金额
            $data['list'] = [];
            return returnOk($data);
        }
        $user_id_list = get_arr_column($list, 'buy_user_id');
        if(!empty($user_id_list)){
            $userList = M('users')->where("user_id", "in", implode(',', $user_id_list))->getField('user_id,nickname,mobile,head_pic');  //购买者信息
        }else{
            $userList='';
        }
        /*获取订单商品*/  //分佣是支付成功才有
        if($p==1){
            $order_id_list = get_arr_column($list, 'order_id');
            if(!empty($order_id_list)){

                $orderList = M('order')->where("order_id", "in", implode(',', $order_id_list))->getField('order_id,pay_time,add_time,total_amount');  //订单信息
               // $total_List = M('order')->where("order_id", "in", implode(',', $order_id_list))->where('','between',"$first_time","$last_time")->getField('total_amount');  //订单信息
            }
            $total_amount = get_arr_column($orderList, 'total_amount');//订单总价
            $subtotal = array_sum($total_amount); //团队订单总额
            $data['distribut_money'] = $user['distribut_money']; //分佣总金额 今天的元宝总数
            $data['total_order_money'] = $subtotal;//团队订单总额
        }
        foreach ($list as $k => $v) {
            $list[$k]['head_pic'] = $userList[$v['buy_user_id']]['head_pic'];
            $list[$k]['status'] = C('REBATE_STATUS')[$v['status']];
            $list[$k]['pay_time'] = $orderList[$v['order_id']]['pay_time'];
            $list[$k]['add_time'] = $orderList[$v['order_id']]['add_time'];
            $level_name=M('user_level')->where(['level_id'=>$v['level']])->field(['level_name'])->find();
            $list[$k]['level_name']=$level_name['level_name'];
            unset($list[$k]['user_id'],$list[$k]['order_sn'],$list[$k]['order_id'],$list[$k]['remark'],$list[$k]['detail'],$list[$k]['type'],$list[$k]['addtime'],$list[$k]['confirm'],$list[$k]['level']);
        }
        /*
        *当天佣金
        */
        $first_time= strtotime(date("Y-m-d",time()));
        $last_time=$first_time+86400;
        $where1['create_time']=['between',"$first_time,$last_time"];
        $where1['user_id']=$this->user_id;
        $today_money=  M('rebate_log')->where($where1)->field(['money'])->select();
        $today_money=array_sum(get_arr_column($today_money, 'money'));
        $data['today_money']=$today_money;
        $data['count']=$count;
        $data['list'] = $list;
        return returnOk($data);
    }
    /*
     * 个人信息
     */
    public function userinfo()
    {
        if (IS_POST) {
            $userLogic = new UsersLogic();
            $user_info = $userLogic->get_info($this->user_id); // 获取用户信息
            $user_info = $user_info['result'];
            I('post.nickname') ? $post['nickname'] = I('post.nickname') : false; //名称
            I('post.head_pic') ? $post['head_pic'] = I('post.head_pic') : false; //头像地址
            I('post.sex') ? $post['sex'] = I('post.sex') : false; //性别
            I('post.mobile') ? $post['mobile'] = I('post.mobile') : false; //手机
            I('post.birth') ? $post['birth'] = I('post.birth') : false; //生日
            I('post.email') ? $post['email'] = I('post.email') : false; //邮箱
            if (!empty($post['email'])){
                if(!check_email($post['mobile'])){
                    return returnBad('邮箱格式不对', 306);
                }
                $c = M('users')->where(['email' => $post['email'], 'user_id' => $this->user_id])->count();
                if($c) return returnBad('邮箱已被使用', 306);
            }
            if (!empty($post['mobile'])){
                if(!check_mobile($post['mobile'])){
                    return returnBad('手机号以1开头的11位数值', 306);
                }
                $c = M('users')->where(['mobile' => input('post.mobile'), 'user_id' =>$this->user_id])->count();
                if($c) return returnBad('手机已被使用', 306);
            }
            if (!$userLogic->update_info($this->user_id, $post)){
                return returnBad('保存失败', 308);
            }
            return returnOk($user_info);
        }
    }

    /*
     * 密码修改
     */
    public function password()
    {
      //  $this->user_id=207;
        if(!$this->user_id){
            return returnBad('用户不存在', 308);
        }
        $logic = new UsersLogic();
        $user = $logic->getuserinfo($this->user_id);
        if ($user['mobile'] == '' )
            return returnBad('请先绑定手机', 308);
        if(IS_POST){
            $userLogic = new UsersLogic();
            $data = $userLogic->password($this->user_id, I('post.new_password'), I('post.confirm_password'),I('post.code'), I('post.mobile'));
            if ($data['status'] == -1)
                return returnBad($data['msg'], 308);
            return returnOk($data);
        }

        return returnOk($user);
    }

    /**
     * 用户地址列表
     */
    public function address_list()
    {
        $address_lists =  db('user_address')->where('user_id', $this->user_id)->field(['address_id,consignee,country,city,district,twon,address,mobile,is_default'])->select();
        $region_list = db('region')->cache(true)->getField('id,name');
        foreach ($address_lists as $k => $v){
            $address_lists[$k]['province'] = $region_list[$v['province']];
            $address_lists[$k]['city'] = $region_list[$v['city']];
            $address_lists[$k]['district'] = $region_list[$v['district']];
            $address_lists[$k]['twon'] = $region_list[$v['district']];
        }
        return returnOk($address_lists);
    }
   //修改支付密码
    public  function payPwd(){
        $logic = new UsersLogic();
        $res = $logic->payPwd($this->user_id, I('post.password'), I('post.paypwd'), I('post.two_paypwd'));
        return returnOk($res);
    }
    /**
     * 绑定手机号
     */
    public function bandMobile(){
        $ress=M('users')->where(['user_id'=> $this->user_id])->field('mobile')->find();
        if($ress){
            if(!empty($ress['mobile'])&&check_mobile($ress['mobile'])){
                returnBad([ 'msg' => '已经绑定过手机号，无需在绑定']);
            }
        }
        $logic = new UsersLogic();
        $user = $logic->bandMobile($this->user_id, I('post.mobile'), I('post.code'));
        return returnOk($user);
    }
    /**
     * 保存地址
     */
    public function addressSave()
    {
        $address_id = input('address_id/d',0);
        if(IS_POST){
            $data = input('post.');
            if (!empty($address_id)) {
                //编辑
                $userAddress = UserAddress::get(['address_id'=>$address_id,'user_id'=> $this->user_id]);
                if(empty($userAddress)){
                    return returnBad("参数错误",309);
                }
            } else {
                //新增
                $userAddress = new UserAddress();
                $user_address_count = Db::name('user_address')->where("user_id", $this->user_id)->count();
                if ($user_address_count >= 20) {
                    return returnBad("最多只能添加20个收货地址",309);
                }
                //检查手机格式
                if($data['consignee'] == '')
                    return returnBad("收货人不能为空",309);
                if (!($data['province'] > 0)|| !($data['city']>0) || !($data['district']>0))
                    return returnBad("所在地区不能为空",309);
                if(!$data['address'])
                    return returnBad("地址不能为空",309);
                if(!check_mobile($data['mobile']) && !check_telephone($data['mobile']))
                    return returnBad("手机号码格式有误",309);
                $data['user_id'] = $this->user_id;
            }
            $userAddress->data($data);
            $userAddress['longitude'] = true;
            $userAddress['latitude'] = true;
            $row = $userAddress->save();
            if ($row !== false) {
                return returnOk([$userAddress->address_id]);
            } else {
                return returnBad("操作失败",309);
            }
        }
        $address = M('user_address')->where(array('address_id' => $address_id, 'user_id' => $this->user_id))->find();
        if($address){
            $region_list = db('region')->where(array('level' => ["in", "1,2,3"]))->cache(true)->getField('id,name');
            $address['provinceName'] = $region_list[$address['province']];
            $address['cityName'] = $region_list[$address['city']];
            $address['districtName'] = $region_list[$address['district']];
        }
        return returnOk($address);
    }

    /**
     * 获取市或者区
     */
    public function getRegionByParentId()
    {
        $parent_id = I('parent_id/d');
        if ($parent_id) {
            $region_list = Db::name('region')->field('id,name')->where(['parent_id' => $parent_id])->select();
        }else{
            $region_list = Db::name('region')->where(['level'=> 1])->field('id,name')->select();
        }
        return returnOk($region_list);
    }
    /*
    * 添加收货地址
    */
    public function receiving_address(){
        $name = I('name');//收货人
        $province = I('province');//省
        $city = I('city');//市
        $district = I('district');//地区
        $twon = I('twon');//乡镇
        $address = I('address');//详细地址
        $is_default = I('is_default/d');//是否默认地址
        $mobile = I('mobile');//手机号
        $famale=I('famale/d');//性别
        $aar=[0,1,2];
        if(!check_mobile($mobile)){
            return  returnOk(['status' => 0, 'msg' => '手机格式有误！']);
        }
        if(!in_array($famale,$aar)){
            return  returnOk(['status' => 0, 'msg' => '参数有误']);
        }
        if($name == '')
            return returnBad("收货人不能为空",309);
        if($address == '')
            return returnBad("收货地址为空",309);
        $arr=[];
        if(!empty($this->user_id)){
         $result= M("users")->where(array('user_id'=>$this->user_id))->find();
         if(!empty($result)){
           $arr=array(
               "user_id"=>$this->user_id,
               "consignee"=>$name,
               "province"=>$province,
               "city"=>$city,
               "district"=>$district,
               "twon"=>$twon,
               "address"=>$address,
               "is_default"=>$is_default,
               "mobile"=>$mobile,
               "famale"=>$famale,
           );
           if($is_default==1){
               $is_default=0;
               M('user_address')->where(array('user_id'=>$this->user_id))->save(array('is_default'=>$is_default));
           }
           M('user_address')->where(array('user_id'=>$this->user_id))->add($arr);
         return returnOk(['status'=>1,'msg'=>'收货地址添加成功']);
         }else{
             return  returnOk(['status' => 0, 'msg' => '用户不存在']);
         }
        }else{
            return  returnBad(['msg' => '请先登录','return_url'=>U('User/login')]);
        }
    }
    /*
     * 设置修改地址
     */

     public function edit_address(){
         $address_id = I('address_id/d');
         $user_address = M('user_address')->where(array('user_id'=>$this->user_id))->where(array('address_id'=>$address_id))->find();
         echo "<pre>";var_dump($user_address);die;
     }
    /*
     * 设置默认收货地址
     */
    public function set_default()
    {
        $id = I('id/d');
        M('user_address')->where(array('user_id' =>$this->user_id))->save(array('is_default' => 0));
        $row = M('user_address')->where(array('user_id' => $this->user_id, 'address_id' => $id))->save(array('is_default' => 1));
        if($row){
            $data='修改地址成功';
        }else{
            $data='修改地址失败';
        }
        return returnOk($data);
    }

    /*
     * 地址删除
     */
    public function del_address()
    {
        $id = I('get.id/d');
        $address = M('user_address')->where("address_id", $id)->find();
        if(empty($address)){
            return returnOk(['msg'=>'收货地址已删除']);
        }
        $row = M('user_address')->where(array('user_id' =>  $this->user_id, 'address_id' => $id))->delete();
        // 如果删除的是默认收货地址 则要把第一个地址设置为默认收货地址
        if ($address['is_default'] == 1) {
            $address2 = M('user_address')->where("user_id",$this->user_id)->find();
            $address2 && M('user_address')->where("address_id", $address2['address_id'])->save(array('is_default' => 1));
        }
        if (!$row)
            return returnBad("删除失败", 308);
        else
            return returnOk(['msg'=>'删除成功']);
    }


      /**
     * 用户收藏列表
     */
    public function collect_list()
    {
        $userLogic = new UsersLogic();
        $data = $userLogic->get_goods_collect($this->user_id);
        $list = $data['result'];
        foreach ($list as $k => $v){
            $list[$k]['original_img'] = url_add_domain(goods_thum_images($v['goods_id'],100,100));
        }
        return returnOk($list);
    }

    /*
     *取消收藏
     */
    public function cancel_collect()
    {
        $collect_id = I('collect_id/d');
        if(empty($user_id)){
            return returnBad('登录超时请重新登录',302);
        }
        if (M('goods_collect')->where(['collect_id' => $collect_id, 'user_id' => $this->user_id])->delete()) {
            return returnOk();
        } else {
            return returnBad("取消收藏失败");
        }
    }
    /*
     *添加收藏
     */
     public function add_collect(){
         $goods_id = I('goods_id/d');
         if(!empty($this->user_id)){
             if(empty($goods_id)){
                 return  returnBad("参数缺失",300);
             }else{
                 $result= M('goods')->where(array("goods_id"=>$goods_id))->find();
                 if(!empty($result)){
                     $res =M('goods_collect')->where(array('user_id'=>$this->user_id,'goods_id'=>$goods_id))->find();
                     if($res==TRUE){
                         return  returnBad(['status' => 0, 'msg' => '商品已收藏过']);
                     }else{
                         $result= M('goods_collect')->add(array('user_id'=>$this->user_id,'goods_id'=>$goods_id,'add_time'=>time()));
                         if($result){
                             return  returnOk(['status' => 1, 'msg' => '商品收藏成功']);
                         }
                     }
                 }else{
                     return  returnOk(['status' => 0, 'msg' => '收藏的商品不存在']);
                 }
             }
         }else{
          return  returnOk(['status' => 0, 'msg' => '请先登录','return_url'=>U('User/login')]);
         }
     }
    /**
     * 优惠券
     */
    public function coupon()
    {
        $logic = new UsersLogic();
        $data = $logic->get_coupon($this->user_id, input('type'));
     //  echo "<pre>";var_dump($data);die;
        foreach($data['result'] as $k =>$v){
            $data['result'][$k]['expression'] = intval($v["expression"]);//使用金额
            $data['result'][$k]['condition_money'] = intval($v["condition_money"]);//优惠条件
            $data['result'][$k]['use_status'] = intval($v["use_status"]);//使用状态
            $data['result'][$k]['name'] = intval($v["name"]);//使用状态
            $data['result'][$k]['end_time'] = intval($v["end_time"]);//使用状态
//            $user_type = $v['use_type'];
//            $data['result'][$k]['use_scope'] = C('COUPON_USER_TYPE')["$user_type"];
//            if($user_type==1){ //指定商品
//                $data['result'][$k]['goods_id'] = M('goods_coupon')->field('goods_id')->where(['coupon_id'=>$v['cid']])->getField('goods_id');
//            }
//            if($user_type==2){ //指定分类
//                $data['result'][$k]['category_id'] = Db::name('goods_coupon')->where(['coupon_id'=>$v['cid']])->getField('goods_category_id');
//            }
        }
        $coupon_list = $data['result'];
        return returnOk($coupon_list);
    }
    /**
     * 领取优惠券
     * type id 活动优惠券id
     * type  user_id  用户id
     * return  type  json
     */
    public function get_coupon(){
        $id = I('id/d'); //券id
        if(empty($id)){
            return returnBad("缺少参数");
        }
        $res=M('prom_coupon')->where(array('uid'=>$this->user_id,'poid'=>$id))->find();
        if($res){
            return returnBad("已经领取过优惠券，不能重复领取");
        }
       // $user_id = $this->user_id; 在公众号中获取的用户user_id
        $activityLogic = new \app\common\logic\ActivityLogic;
        $coupon_list = $activityLogic->get_coupon($id, $this->user_id);
        return returnOk($coupon_list);
    }
    /**
     * 用户领取优惠券列表
     */
    public function coupon_list(){
        if(!empty($this->user_id)){
            $activityLogic = new \app\common\logic\ActivityLogic;
            $coupon_list = $activityLogic->getCouponListInfo($this->user_id);
            return returnOk($coupon_list);
        }else{
            $res = ['status' => 0, 'msg' => '请先登录','return_url'=>U('User/login')];
            return returnOk($res);
        }
    }

    /**
     * 会员签到
     * 2019/3/22
     */
    public function user_sign()
    {
        $userLogic = new UsersLogic();
        $user_id   = $this->user_id;
        $config    = tpCache('sign');
       $date=date("Y-n-j",strtotime(date("Y-m-d",time())));
        //签到开关
        if ($config['sign_on_off'] > 0) {
            $map['sign_last'] = $date;
            $map['user_id']   = $user_id;
            $userSingInfo     = Db::name('user_sign')->where($map)->find();
            //今天是否已签
            if($userSingInfo) return returnBad("您今天已经签过啦",306);
            //是否有过签到记录
            $checkSign = Db::name('user_sign')->where(['user_id' => $user_id])->find();
            if (!$checkSign) {
                $result = $userLogic->addUserSign($user_id, $date);            //第一次签到
            } else {
                $result = $userLogic->updateUserSign($checkSign, $date);       //累计签到
            }
            $return = ['msg' => $result['msg'], 'sign_integral'=> $result['sign_integral']];
        } else {
            return returnBad("该功能未开启",306);
        }
        return returnOk($return);
    }
    /**
     * 签到累计积分
     */
    public function sign_total(){
        $sign_total = Db::name('user_sign')->where(['user_id' => $this->user_id])->field('cumtrapz,sign_last,sign_count')->find();
        $sign_status=1; //已经签到了
        $date_now= strtotime(date('Y-m-d',time()));
       if($date_now !=strtotime($sign_total['sign_last'])){
           $sign_status=0;
       }
       $arr= explode(',',$sign_total['sign_time']);

       $result['sign_count']=$sign_total['sign_count'];
       $result['sign_status']=$sign_status;
       $result['sign_integral']=$sign_total['cumtrapz'];
       return returnOk($result);
    }
    /**
     * 签到规则
     */
    public  function sign_rules(){
      $sign_content= M('article')->where(['article_id'=>5])->field('content')->find();
      if(!$sign_content){
          return returnBad("签到规则内容不存在");
      }
      $content['content']=htmlspecialchars_decode($sign_content['content']);
      return returnok($content);
    }
    /**
     * 申请提现记录/进入提现面数据
     */
    public function withdrawals(){
        C('TOKEN_ON', true);
        $cash_open=tpCache('cash.cash_open');
        if($cash_open!=1){
            return returnBad("提现功能已关闭,请联系商家",308);
        }
        if(!empty($this->user_id)){
            $userinfo= Db::name('users')->where(['user_id'=>$this->user_id])->find();
        }else{
            return  returnOk(['status' => 0, 'msg' => '请先登录','return_url'=>U('User/login')]);
        }
        $type =I('get.type')?I('get.type'):3;
        if($type==3){
            $Model=M('bank');
           $bank= $Model->field('id,bankname,banknum')->where(['user_id'=>$this->user_id])->where(['is_default'=>1])->find();
           if($bank){
               $data['bank']=$bank;
           }else{
               $bank1=$Model->field('id,bankname,banknum')->where(['user_id'=>$this->user_id])->where(['is_default'=>0])->order('create_time desc')->limit(1)->find();
              if($bank1){
                  $Model->where(['user_id'=>$this->user_id])->where(['id'=>$bank1['id']])->save(['is_default'=>1]);
                  $data['bank']=$bank1;
              }else{
                  $data['bank']='没有绑定银行卡，请去绑定';
              }
           }
        }else{
            $data['bank']='';
        }
        if (IS_POST) {
            $cash_open=tpCache('cash.cash_open');
            if($cash_open!=1){
                return returnBad("提现功能已关闭,请联系商家",308);
            }
            $data['money'] = I('post.money');
            $data['type'] = I('post.type');

            $data['create_time'] = time();
            $cash = tpCache('cash');
            if($data['money'] > $userinfo['distribut_money']) { //distribut_money 累积分佣金额
                return returnBad("本次提现余额不足", 308);
            }
            if($data['money'] <= 0) {
                return returnBad("提现额度必须大于0", 308);
            }
            if($data['money']>$userinfo['user_money']){
                return returnBad("提现账户余额不足", 308);
            }
            // 统计所有0，1的金额
            $status = ['in','0,1'];
            $total_money = Db::name('withdrawals')->where(array('user_id' => $this->user_id, 'status' => $status))->sum('money');
            if ($total_money + $data['money'] > $userinfo['distribut_money']) {
                return returnBad("您有提现申请待处理，本次提现余额不足", 308);
            }

            if ($cash['cash_open'] == 1) {
                $taxfee =  round($data['money'] * $cash['service_ratio'] / 100, 2);
                // 限手续费
                if ($cash['max_service_money'] > 0 && $taxfee > $cash['max_service_money']) {
                    $taxfee = $cash['max_service_money'];
                }
                if ($cash['min_service_money'] > 0 && $taxfee < $cash['min_service_money']) {
                    $taxfee = $cash['min_service_money'];
                }
                if ($taxfee >= $data['money']) {
                    return returnBad("提现额度必须大于手续费!", 308);
                }
                $data['taxfee'] = $taxfee;

                // 每次限最多提现额度
                if ($cash['min_cash'] > 0 && $data['money'] < $cash['min_cash']) {
                    return returnBad('每次最少提现额度' . $cash['min_cash'], 308);
                }
                if ($cash['max_cash'] > 0 && $data['money'] > $cash['max_cash']) {
                    return returnBad('每次最多提现额度' . $cash['max_cash'], 308);
                }
                $status = ['in','0,1,2,3'];
                $create_time = ['gt',strtotime(date("Y-m-d"))];
                // 今天限总额度
                if ($cash['count_cash'] > 0) {
                    $total_money2 = Db::name('withdrawals')->where(array('user_id' => $this->user_id, 'status' => $status, 'create_time' => $create_time))->sum('money');
                    if (($total_money2 + $data['money'] > $cash['count_cash'])) {
                        $total_money = $cash['count_cash'] - $total_money2;
                        if ($total_money <= 0) {
                            return returnBad("你今天累计提现额为{$total_money2},金额已超过可提现金额.", 308);
                        } else {
                            return returnBad("你今天累计提现额为{$total_money2}，最多可提现{$total_money}账户余额.", 308);
                        }
                    }
                }
                // 今天限申请次数
                if ($cash['cash_times'] > 0) {
                    $total_times = Db::name('withdrawals')->where(array('user_id' => $this->user_id, 'status' => $status, 'create_time' => $create_time))->count();
                    if ($total_times >= $cash['cash_times']) {
                        return returnBad("今天申请提现的次数已用完.", 308);
                    }
                }
            }else{
                $data['taxfee'] = 0;
            }
            if($data["type"]==1){
                $data["bank_name"] = "微信";
            }else if($data["type"]==2){
                $data["bank_name"] = "支付宝";
            }else if($data["type"]==3){
                $data["bank_name"] = "银行卡";
            }
            $data['truemoney']=$data['money']-$data['taxfee'];
            if (M('withdrawals')->add($data)) {
                if($data['taxfee']>0){
                    accountLog($this->user_id, ($data['taxfee'] * -1), 0, "提现手续费");//手动转账
                }
                accountLog($this->user_id, ($data['money'] * -1), 0, "奖励金提现");//佣金提现，
                Db::name("users")->where("user_id",$this->user_id)->save(["withdrawal_money"=>["exp","withdrawal_money"+$data['money']]]); //exp 提现总额
                return returnOk('提现成功，等待审核');
            } else {
                return returnBad("提交失败,联系客服!", 308);
            }
        }
        $distribut_money = $userinfo["distribut_money"];//累计返佣金额
        $withdrawal_money =$userinfo["withdrawal_money"];//累计提现金额
        $with_money = $distribut_money-$withdrawal_money;//现有佣金额度

        if($with_money<0){
            return returnBad("提现金额异常,联系客服!", 308);
        }
        $user_money = $userinfo["user_money"];//用户金额
        if($with_money <= $user_money){
            $dist_money = $with_money;
        }else{
            $dist_money = $user_money;
        }
        $data['cash_config']=tpCache('cash');//提现配置项
        $data['distribut_money']= $dist_money;//用户可提现余额
        return returnOk($data);
    }

    /**
     * 实名认证
     * 2019/3/22
     */
    public function RealnameAuthentication(){
        if(empty($this->user_id)){
            return  returnOk(['msg' => '请先登录','return_url'=>U('User/login')]);
        }
        if(M('users')->where(['user_id'=>$this->user_id])->where(['is_name_auth'=>1])->find()){
            return  returnBad( '已认证过身份，无需再认证');
        }
         $post['realname']=I('post.realname');
         $post['cardnum']= I('post.cardnum');
         if($post['realname'] == NULL){
             return  returnBad(['msg' => '名字不能为空']);
         }
       if(!check_idCard($post['cardnum'])){
           return  returnBad(['msg' => '身份证填写错误']);
       }
        $post['is_name_auth']=1;
      if(M('users')->where(['user_id'=>$this->user_id])->save($post)){
          return  returnOk(['msg' => '身份认证成功！']);
      }else{
          return  returnBad(['msg' => '修改失败']);
      }
    }
    /*
        添加银行卡
     * */
    public function bankAdd(){
        if(!empty($this->user_id)){
            $userinfo= Db::name('users')->where(['user_id'=>$this->user_id])->find();
        }else{
            return  returnOk(['status' => 0, 'msg' => '请先登录','return_url'=>U('User/login')]);
        }
        $data['cardholder'] =!empty($userinfo['u_truename'])?$userinfo['u_truename']:$userinfo['nickname']; //银行名称
        $data['bankname'] =I('post.bankname'); //银行名称
        $data['banknum']=I('post.banknum'); //银行卡号
        $data['bankname2'] =I('post.bankname2');//银行卡确认
        $data['bankplace']=I('post.bankplace');//开户支行
        $data['place'] =I('post.place');//开户所在地
        $data['create_time'] =time();//
        $data['user_id'] =$this->user_id;//
        if($data['banknum'] !=$data['bankname2'] ){
            return  returnBad( '两次填写的银行卡不一致');
        }
        $userBankValidate = Loader::validate('UserBank');
        if (!$userBankValidate->batch()->check($data)) {
            return returnBad($userBankValidate->getError(), 308);
        }
        if(M('bank')->where(['user_id'=>$this->user_id])->where(['banknum'=>$data['banknum']])->find()){
            M('bank')->where(['user_id'=>$this->user_id])->where(['banknum'=>$data['banknum']])->save(['update_time'=>time()]);
            return  returnBad( '银行卡不能反复提交！');
        }
         $res=M('bank')->add($data);
        if(!empty($res)){
            return  returnOk( '银行卡添加成功！');
        }else{
            return  returnBad( '银行卡添加失败！');
        }
    }
        /**
    * 银行卡列表
    */
       public function bankList(){
           if(!empty($this->user_id)){
               $userinfo= Db::name('users')->where(['user_id'=>$this->user_id])->find();
           }else {
               return returnOk(['status' => 0, 'msg' => '请先登录', 'return_url' => U('User/login')]);
           }
           $bank =M('bank')->field('id,bankname,banknum,is_default')->where(['user_id'=>$this->user_id])->select();
           if(!$bank){
               return returnBad('没有添加银行卡');
           }
           return returnOk($bank);
       }
//    /**
//     * 提现记录列表
//     */
//    public function withdrawals_list()
//    {
//        $p = I("p/d");
//        $withdrawals_where['user_id'] = $this->user_id;
//        $count = M('withdrawals')->where($withdrawals_where)->count();
//        $page = new Page($count, 15);
//        $lists = M('withdrawals')->where($withdrawals_where)->order("create_time desc")->limit("{$page->firstRow},{$page->listRows}")->select();
//        $next = M('withdrawals')->where($withdrawals_where)->page($p + 1, 15)->column('id');
//        foreach($lists as $v){
//            $ym = date("Y年m月", $v["create_time"]);
//            $v["status"] = C('WITHDRAW_STATUS')[$v["status"]];
//            $list[$ym][]=$v;
//        }
//        $data["next_page"] = $next ? $p + 1 : false;
//        $data["list"] = $list;
//        return returnOk($data);
//    }

    /**
     * 查看消息
     */
    public function message_notice_detail()
    {
        $type = I('type', 0);
        // $type==3私信，暂时没有

        $message_logic = new Message();
        $message_logic->checkapiPublicMessage($this->user_id);

        $where = array(
            'user_id' => $this->user_id,
            'deleted' => 0,
            'category' => $type
        );
        $userMessage = new UserMessage();
        $count = $userMessage->where($where)->count();
        $page = new Page($count, 10);
        $rec_id = $userMessage->where( $where)->LIMIT($page->firstRow.','.$page->listRows)->order('rec_id desc')->column('rec_id');
        $lists = $message_logic->sortMessageListBySendTime($rec_id, $type);
        foreach ($lists as $k => $v){
            $list[] = collection($v)->toArray();
        }
        return returnOk($list);
    }

    /**
     * 标记已读
     */
    public function message_notice_info(){
        $message_logic = new Message();
        $forRead = $message_logic->setApiMessageForRead(I('rec_id'), $this->user_id);
        if($forRead['status']>0){
            return returnOk($forRead['msg']);
        }else{
            return returnBad($forRead['msg'],308);
        }
    }

    /**
     * 删除站内信
     */
    public function del_message_notice(){
        $message_logic = new Message();
        $forRead = $message_logic->deletedApiMessage(I('rec_id'), 0, $this->user_id);
        if($forRead['status']>0){
            return returnOk($forRead['msg']);
        }else{
            return returnBad($forRead['msg'],308);
        }
    }

    /**
     * @return array|\think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 申请代理
     */
    public function agent_apply()
    {
        $userLogic = new UsersLogic();
        $data["user_leve"] = Db::name("user_level")->where(["level_id"=>['>', 2]])->select();
        if (IS_POST) {
            I('post.level') ? $data['level_id'] = I('post.level') : false; //级别
            I('post.realname') ? $post['realname'] = I('post.realname') : false; //真实名称
            I('post.idcard') ? $post['idcard'] = I('post.idcard') : false; //身份证
            I('post.mobile') ? $post['mobile'] = I('post.mobile') : false; //手机
            I('post.province') ? $post['province'] = I('post.province') : false; //省
            I('post.city') ? $post['city'] = I('post.city') : false; //市
            I('post.district') ? $post['district'] = I('post.district') : false; //区
            I('post.address') ? $post['address'] = I('post.address') : false; //详细地址
            $mobile = I('post.mobile');

            $userAgentValidate = Loader::validate('UserAgent');
            if (!$userAgentValidate->batch()->check($post)) {
                return returnBad($userAgentValidate->getError(), 308);
            }


            if (!empty($mobile)) {
                $c = M('users')->where(['mobile' => input('post.mobile'), 'user_id' => ['<>', $this->user_id]])->count();
                if($c) return returnBad('手机已被使用', 306);
            }
            //$post['is_distribut'] = 2;//待审核
            if (!$userLogic->update_info($this->user_id, $post))
                return returnBad('保存失败', 308);
            $data['add_time'] = time();
            $data['user_id'] = $this->user_id;

            $useragent = Db::name('user_agent')->where(['user_id'=>$this->user_id,'level_id'=>$data['level_id']])->find();
            if($useragent){
                if($useragent["stauts"]==1){
                    return returnOk([$useragent["id"]]);
                }
                Db::name('user_agent')->where(["id"=>$useragent["id"]])->save($data);
                return returnOk([$useragent["id"]]);
            }
            $agent = Db::name('user_agent')->insertGetId($data);
            //奖励金分成
            $first_rate = tpCache("bond.partner_bond");//一级奖励金比例
            $second_rate = tpCache("bond.total_agent_bond");//二级奖励金比例

            //奖励金记录发放
            $amount = M('user_level')->where(array('level_id' => $data['level_id']))->getField("amount");//支付金额

            $first_money = $amount * ($first_rate / 100); // 一级赚到的钱
            $second_money = $amount * ($second_rate / 100); // 二级赚到的钱

            $users = Db::name('users')->where(['user_id'=>$data["user_id"]])->find();
            $first_level = Db::name('users')->where(['user_id'=>$users["first_leader"]])->getField("level");

            // 一级 分销商赚 的钱. 小于一分钱的 不存储
            if($users['first_leader'] > 0 && $first_money > 0.01 && $first_level > 2){
                $data = array(
                    'user_id' =>$users['first_leader'],
                    'buy_user_id'=>$users['user_id'],
                    'nickname'=>$users['nickname'],
                    'goods_price' => $amount,
                    'money' => $first_money,
                    'level' => 1,
                    'create_time' => time(),
                    'type' => 2
                );
                M('rebate_log')->add($data);
            }
            $tmp_user = M('users')->where("user_id", $users['second_leader'])->find();
            // 二级 分销商赚 的钱.战略合作伙伴允许二级分销
            if($users['second_leader'] > 0 && $second_money > 0.01 && $tmp_user["level"]==7)
            {
                $data = array(
                    'user_id' =>$users['second_leader'],
                    'buy_user_id'=>$users['user_id'],
                    'nickname'=>$users['nickname'],
                    'goods_price' => $amount,
                    'money' => $second_money,
                    'level' => 2,
                    'create_time' => time(),
                    'type' => 2
                );
                M('rebate_log')->add($data);
            }
            if($agent){
                return returnOk($agent);
            }else{
                return returnBad('保存失败', 308);
            }
        }
        $user_agent = Db::name('user_agent')->alias("a")
            ->join('users u','u.user_id = a.user_id','INNER')
            ->field("a.*,u.realname,u.idcard,u.mobile,u.province,u.city,u.district,u.address")
            ->where(['a.user_id'=>$this->user_id])->find();
        $region_list = db('region')->where(array('level' => ["in", "1,2,3"]))->cache(true)->getField('id,name');
        $user_agent['provinceName'] = $region_list[$user_agent['province']?$user_agent['province']:1];
        $user_agent['cityName'] = $region_list[$user_agent['city']?$user_agent['city']:2];
        $user_agent['districtName'] = $region_list[$user_agent['district']?$user_agent['district']:3];
        $data["user_agent"] = $user_agent;
        return returnOk($data);
    }

    /*
     *
     * 充值记录
     */
    public function recharge_list(){
        $usersLogic = new UsersLogic;
        $result= $usersLogic->get_recharge_log($this->user_id);  //充值记录
        $this->assign('page', $result['show']);
        $this->assign('lists', $result['result']);
       return returnOk($result['result']);
    }

    /**
     * 获取个人二维码
     * @return \think\response\Json
     */
    public function userQrcode(){
        $user = new UsersLogic();
        $qrcode = $user->checkUserQrcode($this->user_id);
        return returnOk(url_add_domain($qrcode));
    }

    /**
     * 我的佣金
     * @author
     * @time 2018-12-29
     */
    public function rebate_log(){
        $user =$this->user;
        $status = I('status',''); //日志状态
        $sort_asc = I('sort_asc','desc');  //排序
        $sort  = I('sort','create_time'); //排序条件
        $where['user_id'] = $this->user_id;
        $where['status'] = ["neq", 4];
        if($status!=''){
            $where['status']= $status;
        }
        $count = Db::name('rebate_log')->where($where)->count(); //统计符合条件的数量
        $Page = new Page($count,C('PAGESIZE'));
        $lists = Db::name('rebate_log')->where($where)->order("$sort  $sort_asc")->limit($Page->firstRow.','.$Page->listRows)->cache(true)->select(); //查询日志
        $count_money = 0;
        foreach ($lists as $val){
            if($val["status"]!=3){
                $count_money += $val["money"];
            }
        }
        $data=[
            "distribut_money" => $user['distribut_money'],//历史佣金
            "withdrawal_money" => $user['distribut_money'] - $user['withdrawal_money'], //历史佣金 - 提现金额 = 可提现金额
            "count_money" => $count_money, //代收益佣金
            "lists" => $lists, //佣金记录
        ];
        return returnOk($data);
    }

    //查看押金
    public function deposit_log(){
        if($this->user<3){
            return returnBad("您的会员级别无法查看押金", 310);
        }
        $level = Db::name("user_level")->where(["level_id" => $this->user["level"]])->field('level_name,deposit')->find();
        if($level["deposit"] == $this->user["deposit"]){
            return returnOk(["deposit" => $this->user["deposit"],"level_name" => $level["level_name"]]);
        }else{
            return returnBad("查看押金失败，请联系客服", 310);
        }
    }

    /**
     * 佣金记录
     * @return \think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function withdrawals_log(){
        if($this->user["level"] < 2){
            return returnBad("等级较低，无法查看佣金", 306);
        }
        // 销售额 和 我的奖励
        $rebate = Db::name("rebate_log")->where(["user_id" => $this->user_id])->field('money,status,order_id,order_sn')->select();
        $data["reward"]["complete"] = 0;
        $data["reward"]["stay"] = 0;
        $data["withdrawal"]["complete"] = 0;
        $data["withdrawal"]["stay"] = 0;
        $data["reward"]["total_complete"] = 0;
        $data["reward"]["total_stay"] = 0;
        $data["withdrawal"]["total_complete"] = 0;
        $data["withdrawal"]["total_stay"] = 0;
        foreach ($rebate as $k => $v){
            if($v["order_id"]=="" && $v["order_sn"]==""){//奖励金收益
                if($v["status"]==3){//已完成收益
                    $data["reward"]["complete"] += $v["money"];
                    $data["reward"]["total_complete"] += 1;
                }else{
                    $data["reward"]["stay"] += $v["money"];
                    $data["reward"]["total_stay"] += 1;
                }
            }else{
                if($v["status"]==3){//已完成收益
                    $data["withdrawal"]["complete"] += $v["money"];
                    $data["withdrawal"]["total_complete"] += 1;
                }else{
                    $data["withdrawal"]["stay"] += $v["money"];
                    $data["withdrawal"]["total_stay"] += 1;
                }
            }
        }
        $data["distribut_money"] = $this->user['distribut_money'];
        $data["stay_money"] = $data["reward"]["stay"] + $data["withdrawal"]["stay"];
        return returnOk($data);
    }
    /**
     * 押金退还
     * @return array|\think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public  function return_deposit(){
        $deposit = $this->user["deposit"];
        if($deposit==0){
            return returnBad("没有押金可退", 308);
        }

        $return_deposit = Db::name("return_deposit")->where(["user_id"=> $this->user_id, "refund_money" => $deposit, "status" => 0])->find();
        if($return_deposit){
            return returnBad("请等待管理员审核", 308);
        }

        $recharge = Db::name("recharge")->where(["user_id"=> $this->user_id, "account" => $deposit])->order("pay_time desc")->find();
        if(!$recharge){
            return returnBad("订单记录异常，请联系管理员", 308);
        }
        $data = [
            'order_id' => $recharge["order_id"],
            'order_sn' => $recharge["order_sn"],
            'user_id' => $this->user_id,
            'refund_money' => $deposit,
            'addtime' => time(),
        ];
        $return_id = M('return_deposit')->add($data);
        return returnOk($return_id);
    }
    /**
     * 帮助中心
     */
    public function articleList(){
        $article_cat = M('ArticleCat')->where("parent_id  = 0")->select();
        echo "<pre>";var_dump($article_cat);die;
    }
    //查询细胞数据
    public function cell_list(){
       $num = I('num/d');
        if(empty($num)){
            return  returnBad("编号不能为空！");
        }
       if(!strlen($num)==16 ){
           return  returnBad("编号长度不合规！");
       }
       //$data['user']=$this->user_id;
       $res= M('cells')->where(["cell_num"=>$num,"uid"=>$this->user_id])->find();
       if($res){
           $data['update_time']=time();
           M('cells')->where(['cid'=>$res['cid']])->save($data);
          $res= M('cells')->where(['cid'=>$res['cid']])->find();
           return returnOk($res);
       }else{
           return returnBad("没有查询到该细胞状态！");
       }

      // $userinfo=M('users')->where(['user_id'=>$this->user_id])->field(['name,sex'])->find();
      // echo time();die;
//        $saving =date("Y年m月d天",time()); //储蓄日期
//
//       echo $saving;die;
    }

    //添加细胞数据
    public function cell_add(){
        $userinfo=  M('users')->where(['user_id'=>$this->user_id])->field(["user_id,sex,nickname"])->find();
        $date["uid"]=$userinfo['user_id'];
        $date["sex"]=$userinfo['sex'];
        $date["nickname"]=$userinfo['nickname'];
        $date["cell_num"]=I("post.cell_num"); //细胞编号
        $date["saving_time"] =date("Y年m月d天",time()); //储蓄日期
        $date["term_time"]=I("post.term_time"); //存储年限
         $date["saving_num"]=date("ymdhis",time());//存储编码
         $date["insurance_num"]=I("post.insurance_num"); //保单编号
         $date["contract_num"]=I("post.contract_num");  //合同编号
         $date["remark"]=I("post.remark");      // 备注
         $date['create_time']=time();
       //  var_dump($date);die;
        $res=M('cells')->add($date);
        if($res===false){
            return returnBad("添加失败");
        }else{
            return returnOk("添加成功");
        }
    }
    //体检列表
    public function examination_list(){
        $tijian_num = I('tijian_num/d');
        if(empty($tijian_num)){
            return  returnBad("编号不能为空！");
        }
        $res= M('examination')->where(["num"=>$tijian_num,"uid"=>$this->user_id])->find();
        if($res){
            $data['update_time']=time();
            M('examination')->where(['id'=>$res['id']])->save($data);

        }else{
            return returnBad("没有查询到该细胞状态！");
        }
        return returnOk($res);

    }

    //增加体检数据
    public function examination_add(){
       $date['num']=I('post.num');
       $date['pic']=I('post.pic'); //多个照片
       $date['create_time']=time();
       $date['uid']=$this->user_id;
       $res=M("examination")->add($date);
       if($res===false){
           return returnBad("添加失败！");
       }else{
           return returnOk("添加成功！");
       }
    }

    //进门码
    public function entry_code(){
        $user = new UsersLogic();
       // $qrcode = $user->checkUserQrcode($this->user_id);//小程序专属二维码
        $qrcode = $user->createUserQrcodePoster($this->user_id); //gd流合成用户专属推广海报
        echo url_add_domain($qrcode);die;
        return returnOk(url_add_domain($qrcode));

       //$res= httpRequest(ECODE,"POST");
//       if($res['status'] == 'success'){
//
//       }else{
//           return returnBad('门卡开启失败！');
//       }
    }

    public  function testq(){
      //  vendor('luoyy/phpqrcode');
        //
       echo "<pre>"; var_dump(\luoyy\phpqrcode\QRcode::base64('http://www.baidu.com', false, 'M', 4, 1));
        echo 123;die;
    }

    public function tess(){
        $user_arr["id"]=123;
        //$key = urlencode(base64_encode(Des::getInstance()->encrypt($user_arr["id"])));
        $key =123;
        $CreateCode= new Qrcode\CreateCode();
        //  $CreateCode::qrCodeRecommend($url,$path,$name,$source,$type,$matrixPointSize=10,$logo,$compound,$compoundname);
        $url = "http://" . $_SERVER['HTTP_HOST'] . "/api/user/test?key=" .$key ;//二维码内容
        $path = "uploads/qrcode/students/"; //用户二维码路径
        $name = md5($user_arr["id"]).".png";   //用户二维码图片
        $source = "";  //推广背景图
        $type = 1;    //图片二维码
        $compound = "";   //合成推广图路径
        $compoundname =  "";  //合成推广图片
        $logo =  $user_arr["header_images"];        //用户logo
        $result = $CreateCode::qrCodeRecommend($url,$path,$name,$source,$type,$matrixPointSize=10,$logo,$compound,$compoundname);
        var_dump($result);die;
    }
}
    